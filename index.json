[{"categories":["coding","programming"],"content":"Imagine you are writing a very convoluted program with all sorts of threading magic. You want to continuously test various sections of your program before moving on with the next task. Would you rather write all the functions in the file at the same time and start debugging the code for errors, or would you rather fire up an ipython shell with your program loaded up and available to you? ","date":"2021-06-03","objectID":"/running-ipython-inside-a-python-script/:0:0","tags":["python","hacking"],"title":"Running ipython inside a python script","uri":"/running-ipython-inside-a-python-script/"},{"categories":["coding","programming"],"content":"An interactive shell within your script I would rather do the later. IPython makes it incredibly simple to test your code from time to time. This is a fairly basic thing to do but i find it incredibly useful. In my case, i like having a shell which i can interact, if for example i am algotrading. A simple pause function can be triggered within ipython, and manual trading can be done before switching back to algotrading. # Some Threaded Code running in the background import IPython IPython.embed() And you have an ipython shell running. Alternatively you can make use of an eval statement # Put this at the top of your program import readline def interactive_eval(): while True: eval(input()) i_eval = threading.Thread(target=interactive_eval) i_eval.start() # Follow up with rest of your program Note: Make sure you end with os.system('stty sane'). ","date":"2021-06-03","objectID":"/running-ipython-inside-a-python-script/:1:0","tags":["python","hacking"],"title":"Running ipython inside a python script","uri":"/running-ipython-inside-a-python-script/"},{"categories":["coding","programming"],"content":"References IPython — IPython 7.24.1 documentation ","date":"2021-06-03","objectID":"/running-ipython-inside-a-python-script/:2:0","tags":["python","hacking"],"title":"Running ipython inside a python script","uri":"/running-ipython-inside-a-python-script/"},{"categories":["blog"],"content":"To blog - To share, To connect, To create, To inspire To be honest, i wanted to start my blog in an incredibly attractive way, and so i searched a quote. And…. here we are. A quote i found on google, that makes it seem like my blog has a lot of purpose behind it. But, how exactly do you make an introduction attractive enough for you to gain enough ad revenue is all i am thinking right now. Enough though is very subjective, for nothing can be enough. In any case, over time i will try to sell my blog better, but for now this is all i have - This is a place for anyone willing to learn and grow with me. ","date":"2021-06-02","objectID":"/what-is-this-blog-about/:0:0","tags":["blog","rss"],"title":"What is this blog about","uri":"/what-is-this-blog-about/"},{"categories":["blog"],"content":"Topics I hope to write on This blog is going to be about a lot of things over time. Artificial Intelligence Computation Technology Privacy Security Emacs Linux Stock Market Crytocurrency Philosophy Introversion These are probably the main few topics i will deal with. I know this is quite a lot. If you want to subscribe to a subset of these, that is possible too, by using RSS Feeds. You can easily add rss feeds to your outlook account, feedly, or even feeder app. You can follow me on: ","date":"2021-06-02","objectID":"/what-is-this-blog-about/:1:0","tags":["blog","rss"],"title":"What is this blog about","uri":"/what-is-this-blog-about/"},{"categories":["blog"],"content":"Blog Specification This blog is powered by Hugo Feel free to use the comment section down below powered by Disqus Search engine is powered by Algolia ","date":"2021-06-02","objectID":"/what-is-this-blog-about/:2:0","tags":["blog","rss"],"title":"What is this blog about","uri":"/what-is-this-blog-about/"},{"categories":["coding","programming"],"content":"Qutebrowser Qutebrowser is the best web browser for developers, hands down. Nothing can compare to the flexibility it offers. Now, ofcourse other web browser must have ways of enabling and disabling various fancy features, but it’s much harder to achieve. I have a number of scripts that i use on a daily basis in qutebrowser which i maintain here (SidharthArya/.qutebrowser ) on a daily basis. ","date":"2021-06-04","objectID":"/a-quicker-way-to-reach-localhost-with-qutebrowser/:1:0","tags":["browser","qutebrowser","dev","hacking"],"title":"A quicker way to reach localhost with qutebrowser","uri":"/a-quicker-way-to-reach-localhost-with-qutebrowser/"},{"categories":["coding","programming"],"content":"The Problem One of the issues i have sometimes is to reach localhost on various ports quickly. For example, i may have a hugo server running on port 1313 accessed as https://localhost:1313 and i may have an org-roam-server running on port 8080 accessed as https://localhost:8080. Using the regular history matching of a web browser may work, nonetheless, some developing environments have dynamic allocation of ports. So it may associate a port number at random with its services. In this specific case history matching does not work for me. Also history matching feels a lot slower in every browser compared to what we can do in qutebrowser. So, what i do is i write a simple qutebrowser userscript as follows: ","date":"2021-06-04","objectID":"/a-quicker-way-to-reach-localhost-with-qutebrowser/:2:0","tags":["browser","qutebrowser","dev","hacking"],"title":"A quicker way to reach localhost with qutebrowser","uri":"/a-quicker-way-to-reach-localhost-with-qutebrowser/"},{"categories":["coding","programming"],"content":"Solution Create a file called localhost at ~/.local/share/qutebrowser/userscripts (or ~/.config/qutebrowser/userscripts) Write the code below in that file: #!/bin/bash echo open localhost:${QUTE_COUNT:-8000} \u003e $QUTE_FIFO Save the file and change its permission to executable by runnign ~chmod +x ~/.local/share/qutebrowser/userscripts/localhost add a key combination for the script in your config.py usually placed at ~/.config/qutebrowser/config.py. config.bind('zl', 'spawn --userscript localhost') ","date":"2021-06-04","objectID":"/a-quicker-way-to-reach-localhost-with-qutebrowser/:3:0","tags":["browser","qutebrowser","dev","hacking"],"title":"A quicker way to reach localhost with qutebrowser","uri":"/a-quicker-way-to-reach-localhost-with-qutebrowser/"},{"categories":["coding","programming"],"content":"Usage If you need to go to https://localhost:8080. Type 8080zl in normal mode in qutebrowser. 8000 is the default port and so just typing zl would take you to https://localhost:8000. ","date":"2021-06-04","objectID":"/a-quicker-way-to-reach-localhost-with-qutebrowser/:4:0","tags":["browser","qutebrowser","dev","hacking"],"title":"A quicker way to reach localhost with qutebrowser","uri":"/a-quicker-way-to-reach-localhost-with-qutebrowser/"},{"categories":["coding","programming"],"content":"Misc You can instead choose to goto the last port used by writing to a file, as shown below #!/bin/bash if [ -z $QUTE_COUNT ]; then QUTE_COUNT=$(cat /tmp/qutebrowser-localhost-port) fi echo open localhost:$QUTE_COUNT \u003e $QUTE_FIFO echo $QUTE_COUNT \u003e /tmp/qutebrowser-localhost-port ","date":"2021-06-04","objectID":"/a-quicker-way-to-reach-localhost-with-qutebrowser/:5:0","tags":["browser","qutebrowser","dev","hacking"],"title":"A quicker way to reach localhost with qutebrowser","uri":"/a-quicker-way-to-reach-localhost-with-qutebrowser/"},{"categories":["coding","programming"],"content":"References qutebrowser | qutebrowser Writing qutebrowser userscripts | qutebrowser ","date":"2021-06-04","objectID":"/a-quicker-way-to-reach-localhost-with-qutebrowser/:6:0","tags":["browser","qutebrowser","dev","hacking"],"title":"A quicker way to reach localhost with qutebrowser","uri":"/a-quicker-way-to-reach-localhost-with-qutebrowser/"},{"categories":null,"content":"Dealer’s Market ","date":"0001-01-01","objectID":"/braindump/20210603091416-nasdaq/:0:0","tags":null,"title":"NASDAQ","uri":"/braindump/20210603091416-nasdaq/"},{"categories":null,"content":"A non-fungible token is a unit of data stored on a digital ledger, called a blockchain, that certifies a digital asset to be unique and therefore not interchangeable. ","date":"0001-01-01","objectID":"/braindump/20210605141506-non_fungible_token/:0:0","tags":null,"title":"Non Fungible Token","uri":"/braindump/20210605141506-non_fungible_token/"},{"categories":null,"content":"Automatically checks for insecure dependencies ","date":"0001-01-01","objectID":"/braindump/20210601195255-dependabot/:0:0","tags":null,"title":"dependabot","uri":"/braindump/20210601195255-dependabot/"},{"categories":["neuroscience","biology"],"content":"Neurotransmitters are chemical messengers that transmit a signal from a neuron across the synapse to a target cell. ","date":"0001-01-01","objectID":"/braindump/20210522103948-neurotransmitter/:0:0","tags":["neuroscience","biology"],"title":"Neurotransmitter","uri":"/braindump/20210522103948-neurotransmitter/"},{"categories":null,"content":"Functions Arrow Generator ","date":"0001-01-01","objectID":"/braindump/20210404185543-javascript/:1:0","tags":["coding"],"title":"Javascript","uri":"/braindump/20210404185543-javascript/"},{"categories":null,"content":"In which traders use a dealer for buying and selling instead of exchanging directly with each other ","date":"0001-01-01","objectID":"/braindump/20210603091346-dealer_s_market/:0:0","tags":null,"title":"Dealer's Market","uri":"/braindump/20210603091346-dealer_s_market/"},{"categories":null,"content":"Dealer’s Market ","date":"0001-01-01","objectID":"/braindump/20210603091547-nse/:0:0","tags":null,"title":"NSE","uri":"/braindump/20210603091547-nse/"},{"categories":null,"content":"Synthesized by the Pineal Gland ","date":"0001-01-01","objectID":"/braindump/20210517080723-melatonin/:0:0","tags":null,"title":"Melatonin","uri":"/braindump/20210517080723-melatonin/"},{"categories":null,"content":"Something ","date":"0001-01-01","objectID":"/braindump/20210517080735-pineal_gland/:0:0","tags":null,"title":"Pineal Gland","uri":"/braindump/20210517080735-pineal_gland/"}]